
# importy
import cv2
import cupy as np
import numpy
import os
from tqdm import tqdm
import time

# najde všechny soubory v IN složce, aby se mohl loopnout
inputs_jpg = os.listdir("in/")
inputs = []
for a in inputs_jpg:
    if a[0] == "X":
        continue
    l = len(a)
    short = a[:l - 4]
    inputs.append(short)


# příprava loopu
for actual_img in tqdm(inputs):
    # print(actual_img)
    # actual_img = "2022_02_25_11_02_07"

    # načte BW obrázek
    bw = cv2.imread("in/{}.jpg".format(actual_img), 0) # 0 protože chci černobílý obrázek (pro krok úprava)

    # zamalování loga UP
    bw = cv2.rectangle(bw, (10000, 1211), (11800, 1930), (0), -1)
    bw = cv2.rectangle(bw, (0, 1100), (860, 2700), (0), -1)

    # save
    # cv2.imwrite("debug/1.BW/{}.png".format(actual_img), bw)

    # jedu sloupce (zvrch dolů)
    suma_sloupec = np.array([])

    for sloupec in range(len(bw[0])):
        suma_sloupec = np.append(suma_sloupec, np.sum(bw[:, sloupec]))
    # print(suma_sloupec)

    # plot
    range_sloupce = range(len(suma_sloupec))


    # find optimal cut
    med = np.median(suma_sloupec)
    medlist = np.where(suma_sloupec < med)[0]


    clft = (medlist[0])
    crgh = (medlist[-1])
    # lpnb = 0
    # h, w = bw.shape[:2]
    # hwmuch =    
    # while True:
    #     lpnb += 10
    #     print(lpnb)
    #     crgh = (medlist[-lpnb])
    #     temp = np.where(medlist[-(lpnb+hwmuch):-lpnb] < med)[0]
    #     print(temp.size)
    #     if temp.size == hwmuch:
    #         break




    # jedu řádky (zleva do prava)
    suma_radek = np.array([])

    for radek in range(len(bw)):
        suma_radek = np.append(suma_radek, np.sum(bw[radek]))
    # print(suma_radek)

    # plot
    range_radek = range(len(suma_radek))


    # find optimal cut
    med = np.median(suma_radek)
    med = np.where(suma_radek < med)[0]

    ctop = (med[0])
    cbot = (med[-1])

    # cropne obrázky podle předchozích kroků
    margin = 0
    crp = bw[int(ctop+margin) : int(cbot-margin), int(clft+margin) : int(crgh-margin)]
    # print(crp)

    # print(crp)

    # cv2.imwrite("debug/2.cropped/{}.png".format(actual_img), crp)

    def find_otsu(img):
        threshold, _ = cv2.threshold(img, 255, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)   
        return threshold

    otsus = []

    # první čtverec (napravo)
    temp = []
    h, w = crp.shape[:2]
    base_h = int(h // 2) # height
    base_w = int(w * 6 // 7) # width
    start = 100 # je poloviční

    def check_otsu_crop(value, thresh):
        if value >= thresh:
            value = thresh
        return value


    for lp in range(4):
        hst = (base_h - start)
        hen = (base_h + start)
        wst = (base_w - start)
        wen = (base_w + start)

        hst = check_otsu_crop(hst, h)
        hen = check_otsu_crop(hen, h)
        wst = check_otsu_crop(wst, w)
        wen = check_otsu_crop(wen, w)

        # print(hst , hen, wst , wen)
        # print(start * lp)

        otsu_crp = crp[hst : hen, wst : wen]
        # print(otsu_crp)
        start *= 2
        # break
        temp.append(find_otsu(otsu_crp))
    otsus.append(temp)


    # druhý čtverec (nalevo)
    temp = []
    h, w = crp.shape[:2]
    base_h = int(h // 2) # height
    base_w = int(w * 5 // 7) # width
    start = 100 # je poloviční

    def check_otsu_crop(value, thresh):
        if value >= thresh:
            value = thresh
        return value


    for lp in range(4):
        hst = (base_h - start)
        hen = (base_h + start)
        wst = (base_w - start)
        wen = (base_w + start)

        hst = check_otsu_crop(hst, h)
        hen = check_otsu_crop(hen, h)
        wst = check_otsu_crop(wst, w)
        wen = check_otsu_crop(wen, w)

        # print(hst , hen, wst , wen)
        # print(start * lp)

        otsu_crp = crp[hst : hen, wst : wen]
        # print(otsu_crp)
        start *= 2
        # break
        temp.append(find_otsu(otsu_crp))
    otsus.append(temp)


    # třetí čtverec (dole)
    temp = []
    h, w = crp.shape[:2]
    base_h = int(h * 3 // 4) # height
    base_w = int(w * 5.5 // 7) # width
    start = 100 # je poloviční

    def check_otsu_crop(value, thresh):
        if value >= thresh:
            value = thresh
        return value


    for lp in range(4):
        hst = (base_h - start)
        hen = (base_h + start)
        wst = (base_w - start)
        wen = (base_w + start)

        hst = check_otsu_crop(hst, h)
        hen = check_otsu_crop(hen, h)
        wst = check_otsu_crop(wst, w)
        wen = check_otsu_crop(wen, w)

        # print(hst , hen, wst , wen)
        # print(start * lp)

        otsu_crp = crp[hst : hen, wst : wen]
        # print(otsu_crp)
        start *= 2
        # break
        temp.append(find_otsu(otsu_crp))
    otsus.append(temp)


    # čtvrtý čtverec(nahořš)
    temp = []
    h, w = crp.shape[:2]
    base_h = int(h * 1 // 4) # height
    base_w = int(w * 5.5 // 7) # width
    start = 100 # je poloviční

    def check_otsu_crop(value, thresh):
        if value >= thresh:
            value = thresh
        return value


    for lp in range(4):
        hst = (base_h - start)
        hen = (base_h + start)
        wst = (base_w - start)
        wen = (base_w + start)

        hst = check_otsu_crop(hst, h)
        hen = check_otsu_crop(hen, h)
        wst = check_otsu_crop(wst, w)
        wen = check_otsu_crop(wen, w)

        # print(hst , hen, wst , wen)
        # print(start * lp)

        otsu_crp = crp[hst : hen, wst : wen]
        # print(otsu_crp)
        start *= 2
        # break

        temp.append(find_otsu(otsu_crp))
    otsus.append(temp)


    # threshold
    otsus = np.array(otsus)
    otsus.max()
    _, th_otsu = cv2.threshold(crp, int(otsus.max()), 255, cv2.THRESH_BINARY)
    cv2.imwrite("debug/3.Otsu/{}.png".format(actual_img), th_otsu)




